import tkinter as tk
from tkinter import messagebox
import threading
import time
import cv2
import numpy as np
import mss
import base64
import ctypes
import pystray
from PIL import Image, ImageDraw
import sys

# --- Core Parameters ---
CANNY_THRESHOLDS = (100, 200)   # Edge detection thresholds
DETECTION_THRESHOLD = 0.15      # Match score must be higher than this to trigger
SCAN_INTERVAL_S = 0.05          # Screen scan interval (seconds)
COUNTDOWN_SECONDS = 45          # Total countdown duration for the Spike
COOLDOWN_PERIOD_S = 50          # Cooldown after a detection to prevent re-triggering

# --- Image Data (Base64) ---
IMAGE_DATA = {
    '1k': '''''',
    '2k': '''''',
    '2.5k': ''''''
}

# --- Resolution Configurations ---
RESOLUTION_SETTINGS = {
    '1k': {
        'description': '1K (1920x1080)',
        'roi': {'left': 918,  'top': 15, 'width': 84,  'height': 75},
        'b64_data': IMAGE_DATA['1k']
    },
    '2k': {
        'description': '2K (2560x1440)',
        'roi': {'left': 1225, 'top': 20, 'width': 110, 'height': 100},
        'b64_data': IMAGE_DATA['2k']
    },
    '4:3': {
        'description': '4:3 (1440x1080)',
        'roi': {'left': 658, 'top': 0, 'width': 106, 'height': 94},
        'b64_data': IMAGE_DATA['1k']  # Sử dụng cùng template với 1k
    }
}

# Global state variables
stop_event = threading.Event()
last_detection_time = 0

class OverlayWindow(tk.Toplevel):
    """Base class for all overlay windows, encapsulating common settings."""
    def __init__(self, master, geometry_str):
        super().__init__(master)
        self.overrideredirect(True)
        self.wm_attributes("-topmost", True)
        self.wm_attributes("-transparentcolor", "black")
        self.geometry(geometry_str)

class ScoreDisplay(OverlayWindow):
    """A window to display the match score for debugging."""
    def __init__(self, master):
        # Adjust position dynamically based on screen width
        screen_width = master.winfo_screenwidth()
        x_pos = screen_width - 250 if screen_width < 1920 else 1600
        super().__init__(master, f"+{x_pos}+50")
        self.label = tk.Label(self, text="...", font=("Helvetica", 16), fg="white", bg="black")
        self.label.pack(pady=10, padx=10)
        self.last_high_score_time = 0

    def update_score(self, score):
        # To make it easier to observe, "freeze" the high score on screen for 3 seconds
        if score >= DETECTION_THRESHOLD:
            self.label.config(text=f"Match: {score:.3f}", fg="lime")
            self.last_high_score_time = time.time()
        elif time.time() - self.last_high_score_time > 3:
            self.label.config(text=f"Match: {score:.3f}", fg="white")

class CountdownTimer(OverlayWindow):
    """Displays a large countdown timer on the screen."""
    def __init__(self, master):
        super().__init__(master, "+20+20") # Default to top-left corner
        self.label = tk.Label(self, text="", font=("Helvetica", 32, "bold"), fg="white", bg="black")
        self.label.pack(pady=15, padx=15)
        self.job_id = None
        self.withdraw() # Hidden by default

    def start(self, score):
        global last_detection_time
        if time.time() - last_detection_time < COOLDOWN_PERIOD_S:
            return

        last_detection_time = time.time()
        print(f"Detection successful (Match: {score:.3f}), starting countdown window.")

        end_time = time.time() + COUNTDOWN_SECONDS
        if self.job_id: self.after_cancel(self.job_id) # Cancel previous countdown
        self.deiconify() # Show window
        self.tick(end_time)

    def tick(self, end_time):
        remaining = end_time - time.time()
        if remaining > 0:
            self._update_display(remaining)
            self.job_id = self.after(50, self.tick, end_time) # Refresh every 50ms
        else:
            self._update_display(0)
            print("Countdown finished.")
            self.withdraw()

    def _update_display(self, remaining_time):
        if remaining_time <= 7: color = "#ff4757"  # Red
        elif remaining_time <= 14: color = "#ffa502" # Orange
        else: color = "white"
        
        # Show one decimal place in the last 10 seconds for added tension
        text = f"{remaining_time:.1f}" if 0 < remaining_time <= 10 else f"{int(round(remaining_time))}"
        self.label.config(text=text, fg=color)


def prepare_template(b64_string):
    """Decodes from Base64 string and prepares the edge image for matching."""
    try:
        decoded_data = base64.b64decode(b64_string)
        np_array = np.frombuffer(decoded_data, np.uint8)
        template_img = cv2.imdecode(np_array, cv2.IMREAD_UNCHANGED)

        if template_img is None: raise ValueError("Could not decode image from Base64")
        if template_img.shape[2] != 4: raise ValueError("Image must be a PNG with an Alpha channel")

        alpha_mask = template_img[:, :, 3]
        bgr_icon = template_img[:, :, :3]
        # Create a perfect icon without background interference for edge detection
        perfect_icon = cv2.bitwise_and(bgr_icon, bgr_icon, mask=alpha_mask)
        return cv2.Canny(perfect_icon, *CANNY_THRESHOLDS)
    except Exception as e:
        messagebox.showerror("Template Error", f"Error processing built-in image data: {e}")
        return None


def detector_thread_func(root, config, countdown_win, score_win):
    template_edges = prepare_template(config['b64_data'])
    if template_edges is None:
        root.after(0, root.destroy) # Close the app if template loading fails
        return

    print(f"Detection started for {config['description']} - ROI: {config['roi']}")
    if score_win:
        print(f"Debug window position: {score_win.winfo_x()}, {score_win.winfo_y()}")

    with mss.mss() as sct:
        while not stop_event.is_set():
            screenshot = np.array(sct.grab(config['roi']))
            screen_edges = cv2.Canny(screenshot, *CANNY_THRESHOLDS)
            
            result = cv2.matchTemplate(screen_edges, template_edges, cv2.TM_CCOEFF_NORMED)
            _, max_val, _, _ = cv2.minMaxLoc(result)

            # Update UI
            if score_win and score_win.winfo_exists():
                root.after(0, score_win.update_score, max_val)

            if max_val >= DETECTION_THRESHOLD:
                root.after(0, countdown_win.start, max_val)

            time.sleep(SCAN_INTERVAL_S)
    
    print("Background detection thread has stopped.")
    # When the thread ends, destroy the windows it created
    for win in (score_win, countdown_win):
        if win and win.winfo_exists():
            win.destroy()


def main():
    # Force DPI awareness to prevent scaling issues on high-DPI screens
    try:
        ctypes.windll.shcore.SetProcessDpiAwareness(2)
    except Exception as e:
        print(f"Warning: Failed to set DPI awareness, {e}")

    # --- Window Initialization ---
    root = tk.Tk()
    root.title("Valorant Spike Timer")
    root.geometry("600x430")
    root.minsize(600, 430)
    root.resizable(False, False)
    root.configure(bg='#0f1923')

    # colors & simple theme
    style = {
        'bg': '#0f1923',
        'fg': '#ece8e1',
        'accent': '#ff4655',
        'panel': '#151b21',
        'muted': '#8a8a8a',
        'btn': '#1c252e',
        'btn_hover': '#26333b'
    }

    # small helper: tooltip
    class ToolTip(object):
        def __init__(self, widget, text):
            self.widget = widget
            self.text = text
            self.tip = None
            widget.bind("<Enter>", self.show)
            widget.bind("<Leave>", self.hide)
        def show(self, _e=None):
            if self.tip: return
            x = self.widget.winfo_rootx() + 20
            y = self.widget.winfo_rooty() + self.widget.winfo_height() + 5
            self.tip = tk.Toplevel(self.widget)
            self.tip.wm_overrideredirect(True)
            self.tip.wm_geometry(f"+{x}+{y}")
            lbl = tk.Label(self.tip, text=self.text, bg=style['panel'], fg=style['fg'], font=("Segoe UI", 8), bd=1, relief='solid', padx=6, pady=3)
            lbl.pack()
        def hide(self, _e=None):
            if self.tip:
                self.tip.destroy()
                self.tip = None

    # Header
    header = tk.Frame(root, bg=style['bg'])
    header.grid(row=0, column=0, sticky='ew', pady=(18,8), padx=12)
    root.grid_columnconfigure(0, weight=1)

    # Title with better styling
    title_frame = tk.Frame(header, bg=style['bg'])
    title_frame.pack()
    lbl_title = tk.Label(title_frame, text="VALORANT SPIKE TIMER", font=("Segoe UI", 20, 'bold'), fg=style['accent'], bg=style['bg'], pady=2)
    lbl_title.pack()
    
    # Subtitle with icon
    lbl_sub = tk.Label(header, text="⚡ Auto-detect spike and show a 45s overlay", font=("Segoe UI", 9), fg=style['muted'], bg=style['bg'])
    lbl_sub.pack()

    # main panel with card styling
    panel_wrapper = tk.Frame(root, bg=style['bg'])
    panel_wrapper.grid(row=1, column=0, padx=20, pady=(0,12), sticky='nsew')
    
    panel = tk.Frame(panel_wrapper, bg=style['panel'], bd=0, relief='flat', highlightthickness=1, highlightbackground='#2a3744')
    panel.pack(fill='both', expand=True)

    # Resolution title
    res_title = tk.Label(panel, text="SELECT RESOLUTION", font=("Segoe UI", 9, 'bold'), fg=style['muted'], bg=style['panel'])
    res_title.pack(pady=(15, 8))

    # Resolution buttons with card style
    btn_row = tk.Frame(panel, bg=style['panel'])
    btn_row.pack(padx=15, pady=(0, 12))

    buttons = {}
    res_cfg = [('1k','1920 × 1080','Full HD'), ('2k','2560 × 1440','2K'), ('4:3','1440 × 1080','4:3')]
    for i,(k, label_txt, small) in enumerate(res_cfg):
        container = tk.Frame(btn_row, bg=style['panel'])
        container.grid(row=0, column=i, padx=10)
        
        # Styled button with border
        b = tk.Button(container, text=label_txt, font=("Segoe UI", 11, 'bold'), 
                     bg=style['btn'], fg=style['fg'], 
                     activebackground=style['accent'], activeforeground='white', 
                     width=13, height=2, bd=0, cursor='hand2', relief='flat',
                     highlightthickness=1, highlightbackground='#2a3744')
        b.pack(pady=3)
        
        tk.Label(container, text=small, font=("Segoe UI", 8), fg=style['muted'], bg=style['panel']).pack(pady=(2,0))
        buttons[k] = b
        ToolTip(b, f"Use the {label_txt} configuration ({small})")

    # Separator
    separator = tk.Frame(panel, bg='#2a3744', height=1)
    separator.pack(fill='x', padx=20, pady=(5, 8))

    # options row - DEBUG MODE HIDDEN (set DEBUG_MODE = True to show)
    DEBUG_MODE = False  # Change to True to enable debug checkbox
    opts = tk.Frame(panel, bg=style['panel'])
    if DEBUG_MODE:
        opts.pack(fill='x', padx=12, pady=(4,12))
    debug_mode_var = tk.BooleanVar()
    if DEBUG_MODE:
        chk = tk.Checkbutton(opts, text='Enable Debug Mode', variable=debug_mode_var, bg=style['panel'], fg=style['fg'], selectcolor=style['btn'], activebackground=style['panel'], activeforeground=style['accent'], font=("Segoe UI", 9), cursor='hand2', bd=0)
        chk.pack(side='left')
        ToolTip(chk, 'Show detection match score and debug overlay')

    # status + control with card style
    status_frame = tk.Frame(root, bg=style['bg'])
    status_frame.grid(row=2, column=0, sticky='ew', padx=20, pady=(0,8))
    
    status_panel = tk.Frame(status_frame, bg=style['panel'], relief='flat', highlightthickness=1, highlightbackground='#2a3744')
    status_panel.pack(fill='x')
    
    status_label = tk.Label(status_panel, text='⚫ Ready', bg=style['panel'], fg=style['muted'], font=("Segoe UI", 10, 'bold'), pady=10)
    status_label.pack(side='left', padx=15)

    stop_button = tk.Button(status_panel, text='⏹ STOP TIMER', font=("Segoe UI", 10, 'bold'), bg=style['btn'], fg=style['muted'], activebackground=style['accent'], activeforeground='white', state='disabled', bd=0, width=13, cursor='hand2', relief='flat')
    stop_button.pack(side='right', padx=12, pady=8)

    # Spike Info Button (below stop button)
    def show_spike_info():
        info_win = tk.Toplevel(root)
        info_win.title("Spike Mechanics")
        info_win.geometry("420x365")
        info_win.configure(bg=style['bg'])
        info_win.resizable(False, False)
        info_win.lift()
        info_win.attributes('-topmost', True)
        
        title = tk.Label(info_win, text="⏱️ SPIKE MECHANICS", bg=style['bg'], fg=style['accent'], font=('Segoe UI Bold', 11))
        title.pack(pady=8)
        
        # Container
        container = tk.Frame(info_win, bg=style['bg'])
        container.pack(fill='both', expand=True, padx=12, pady=(0, 6))
        
        # Planting
        plant_frame = tk.Frame(container, bg=style['panel'], relief='ridge', bd=1)
        plant_frame.pack(fill='x', pady=2)
        tk.Label(plant_frame, text="🌱 PLANTING", bg=style['panel'], fg=style['accent'], font=('Segoe UI Bold', 9), anchor='w').pack(padx=8, pady=(4,2))
        tk.Label(plant_frame, text="• Takes 4 seconds", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=(0,4), anchor='w')
        
        # Detonation
        det_frame = tk.Frame(container, bg=style['panel'], relief='ridge', bd=1)
        det_frame.pack(fill='x', pady=2)
        tk.Label(det_frame, text="💣 DETONATION TIMER", bg=style['panel'], fg=style['accent'], font=('Segoe UI Bold', 9), anchor='w').pack(padx=8, pady=(4,2))
        tk.Label(det_frame, text="• 45 seconds - Consistent beeping", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=0, anchor='w')
        tk.Label(det_frame, text="• 20 seconds - Double beeping", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=0, anchor='w')
        tk.Label(det_frame, text="• 10 seconds - Triple beeping", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=0, anchor='w')
        tk.Label(det_frame, text="• 7 seconds - White sphere closes in", bg=style['panel'], fg=style['accent'], font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=(0,4), anchor='w')
        
        # Defusing
        def_frame = tk.Frame(container, bg=style['panel'], relief='ridge', bd=1)
        def_frame.pack(fill='x', pady=2)
        tk.Label(def_frame, text="🔧 DEFUSING", bg=style['panel'], fg=style['accent'], font=('Segoe UI Bold', 9), anchor='w').pack(padx=8, pady=(4,2))
        tk.Label(def_frame, text="• Takes 7 seconds total", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=(0,4), anchor='w')
        
        # Half defuse
        half_frame = tk.Frame(container, bg=style['panel'], relief='ridge', bd=1)
        half_frame.pack(fill='x', pady=2)
        tk.Label(half_frame, text="⚡ HALF DEFUSE CHECKPOINT", bg=style['panel'], fg='#ffa500', font=('Segoe UI Bold', 9), anchor='w').pack(padx=8, pady=(4,2))
        tk.Label(half_frame, text="• Activates at 3.5 seconds - Progress saved!", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=0, anchor='w')
        tk.Label(half_frame, text="• Outer casing falls to halfway", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=0, anchor='w')
        tk.Label(half_frame, text="• Audio changes to higher pitch", bg=style['panel'], fg='white', font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=0, anchor='w')
        tk.Label(half_frame, text="• If canceled, resets to 3.5s (not 0s)", bg=style['panel'], fg=style['accent'], font=('Segoe UI', 8), anchor='w').pack(padx=16, pady=(0,4), anchor='w')
        
        btn_close = tk.Button(info_win, text="Close", bg=style['btn'], fg=style['fg'], activebackground=style['btn_hover'], font=('Segoe UI', 9), relief='flat', cursor='hand2', command=info_win.destroy)
        btn_close.pack(pady=(4,8), padx=12, fill='x')

    info_btn_frame = tk.Frame(root, bg=style['bg'])
    info_btn_frame.grid(row=3, column=0, sticky='ew', padx=20, pady=(0, 15))
    
    btn_spike_info = tk.Button(info_btn_frame, text='ℹ️ Info', bg='#2a3f5f', fg='white', activebackground='#3a5f7f', font=('Segoe UI', 9), relief='flat', cursor='hand2', command=show_spike_info, width=10, highlightthickness=1, highlightbackground='#1a2f4f')
    btn_spike_info.pack(side='left', padx=0, pady=0)
    ToolTip(btn_spike_info, "View Spike mechanics and timings")

    # keyboard shortcuts
    root.bind('<Escape>', lambda e: stop_detector() if stop_button['state']=='normal' else root.destroy())

    # --- Logic ---
    detector_thread = None

    def start_detector(selection):
        nonlocal detector_thread
        
        # Resolution mismatch warning
        screen_w, screen_h = root.winfo_screenwidth(), root.winfo_screenheight()
        res_map = {'1k': (1920, 1080), '2k': (2560, 1440), '4:3': (1440, 1080)}
        if (screen_w, screen_h) != res_map[selection]:
            msg = f"Warning: Your current screen is {screen_w}x{screen_h},\nbut you selected the configuration for {res_map[selection][0]}x{res_map[selection][1]}.\nThis may cause detection to fail. Continue anyway?"
            if not messagebox.askyesno("Resolution Mismatch", msg): return

        config = RESOLUTION_SETTINGS[selection]
        config['debug_mode'] = debug_mode_var.get()
        
        status_label.config(text="🟢 Running...", fg="#2ed573")
        for btn in buttons.values(): btn.config(state="disabled")
        stop_button.config(state="normal", bg='#ff4655', fg='white')
        print(f"Selected {config['description']} configuration, starting detection...")
        
        stop_event.clear()
        score_win = ScoreDisplay(root) if config['debug_mode'] else None
        countdown_win = CountdownTimer(root)
        
        # Show debug window and bring to front
        if score_win:
            score_win.deiconify()
            score_win.lift()
            score_win.attributes('-topmost', True)
            print(f"Debug window created at position: +{score_win.winfo_x()}+{score_win.winfo_y()}")

        detector_thread = threading.Thread(
            target=detector_thread_func, 
            args=(root, config, countdown_win, score_win),
            daemon=True
        )
        detector_thread.start()

    def stop_detector():
        print("Stopping timer...")
        stop_event.set()
        status_label.config(text="⚫ Stopped", fg="#8a8a8a")
        for btn in buttons.values(): btn.config(state="normal")
        stop_button.config(state="disabled", bg='#2d3a45', fg='#8a8a8a')

    def show_window(icon=None, item=None):
        root.deiconify()
        root.lift()
        root.focus_force()

    def hide_window():
        root.withdraw()

    def quit_app(icon=None, item=None):
        if icon:
            icon.stop()
        stop_event.set()
        root.quit()
        sys.exit(0)

    def on_closing():
        # Hide to tray instead of closing
        hide_window()

    # System tray icon
    def create_tray_icon():
        # Create icon image
        image = Image.new('RGB', (64, 64), color='#ff4655')
        dc = ImageDraw.Draw(image)
        dc.rectangle([16, 16, 48, 48], fill='white')
        
        # Create menu
        menu = pystray.Menu(
            pystray.MenuItem('Show', show_window, default=True),
            pystray.MenuItem('Exit', quit_app)
        )
        
        icon = pystray.Icon('ValTimer', image, 'Valorant Spike Timer', menu)
        return icon

    # Start tray icon in separate thread
    tray_icon = create_tray_icon()
    tray_thread = threading.Thread(target=tray_icon.run, daemon=True)
    tray_thread.start()

    # --- Command and Event Binding ---
    for res, btn in buttons.items():
        btn.config(command=lambda r=res: start_detector(r))
    stop_button.config(command=stop_detector)

    root.protocol("WM_DELETE_WINDOW", on_closing)

    # Center the window
    root.update_idletasks()
    x = (root.winfo_screenwidth() - root.winfo_width()) // 2
    y = (root.winfo_screenheight() - root.winfo_height()) // 2
    root.geometry(f'+{x}+{y}')

    root.mainloop()


if __name__ == "__main__":
    main()